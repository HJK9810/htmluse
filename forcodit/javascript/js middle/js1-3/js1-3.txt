이벤트 핸들러 등록?
.addEventListener('이벤트 요소', 핸들링함수);
이벤트 제거?
.removeEventListener('이벤트 요소', 등록한 같은 핸들링 함수);
>> 삭제 필요가 있을경우 외부에 함수를 등록할 필요 존재!!!

이벤트 버블링이 있기에 부모요소에 이벤트를 등록해 사용이 가능한 '위임'을 작동 가능.
>> 코드를 적게 작성가능. 즉, 코드의 간략화.
if 부모요소에는 작동하지 않길 원한다면?
1. .tagName === '자식태그'
2. .classList.contains('자식에만 있는 클래스')

event.preventDefalut() : 브라우저의 기본동작 막기
ex) contextmenu : 마우스 우클릭