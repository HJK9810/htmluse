* forEach
배열명.forEach(파라미터, i, arr) => {
  반복용 내용.
}
i : 인덱스
arr : 전달된 배열
>> 리턴값 없음.

* map
배열명.map((파라미터, i) => {
  return 리턴값
});
forEach와 흡사하나, 리턴값을 변수값에 전달 가능.

>>> 반복작업 필요? forEach. 반복을 통해 리턴값 필요? map.
반복횟수 == 배열.length

* filter
배열명.filter((파라미터) => {
  파라미터.요소 === 원하는값
});
>> 리턴값은 배열. 해당 값을 '모두' 찾을때까지 확인.

* find
배열명.find((파라미터) => {
  파라미터.요소 === 원하는값
});
>> 리턴값은 값. 조건을 만족하는 하나의 값을 찾을경우 그 순간 종료.

* some
조건을 만족하는 요소가 1개 이상 있는가?
배열명.some((파라미터) => 조건);
* every
보든 요소가 조건을 만족하는가? or 조건을 만족하지 않는 요소가 1개 이상 있는가?
>> 두 메소드의 리턴값은 boolean
>> 단, 빈 배열일 경우? some : false, every : true

* reduce
배열명.reduce((acc, el, i, arr) => {
  return nextAccValue;
}, initialAccValue);
acc : 콜백함수
initialAccValue : 최초의 콜백함수. 선택사항이지만 사용하는것이 안전.

* sort
배열명.sort();
>> 유니코드 정의순으로 배열 정렬.
if 오름차순 정렬??
배열명.sort((a, b) => a-b);
>> 내림차순은 b-a!

* reverse
배열명.reverse();
>> 배열의 순서 뒤집기!!

* Set ??
1. .add(value): 값을 추가하는 메소드. (메소드를 호출한 자리에는 추가된 값을 가진 Set 자신을 반환.)
2. .has(value): Set 안에 값이 존재하면 true, 아니면 false를 반환하는 메소드.
3. .delete(value): 값을 제거하는 메소드. (메소드를 호출한 자리에는 셋 내에 값이 있어서 제거에 성공하면 true, 아니면 false를 반환.)
4. .clear(): Set 안의 모든 요소를 제거하는 메소드.
5. .size: 요소의 개수를 반환하는 프로퍼티. (메소드가 아닌 점 주의! 배열의 length 프로퍼티와 같은 역할)
>> 중복을 허용하지 않기에 중복제거 배열을 만들때 자주 사용!
ex)
const numbers = [1, 3, 4, 3, 3, 3, 2, 1, 1, 1, 5, 5, 3, 2, 1, 4];
const uniqNumbers = new Set(numbers);

console.log(uniqNumbers); // Set(5) {1, 3, 4, 2, 5}

