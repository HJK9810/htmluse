지수표기? => NeM == N * 10^M
16진법? 0x(16진법표현)
8진법? 0o(8진법표현)
2진법? 0b(2진법표현)

Number 주요 메소드
1. toFixed(N) : 소수점 아래 N번째 자리까지 전달. 부족한 자리수는 0으로 전달. 단, String으로 전환됨. Number로 형변환시에는 부족한 자리의 0은 생략.
>> Number(변수.toFixed()) === +변수.toFixed()
2. toString(N) : N진법으로 숫자 변환. 문자형은 String.
>> 변수.toString() === 변수에 저장된 숫자..toString() ===(저장된 숫자).toString()

* Math 주요 메소드
1. abs(num) : 절대값 계산
2. max(여러 파라미터) : 최댓값 리턴
3. min(여러 파라미터) : 최소값 리턴
4. pow(x, y) : x의 y승
5. sqrt(num) : num의 제곱근 계산
6. round(x) : x를 정수로 만드는 반올림값
>> floor(x), ceil(x) : 각각 x를 정수로 만드는 버림값과 올림값.
7. random() : 0이상 1미만의 랜덤값

숫자오류 해결방법?
>> toFixed() or round()

* String 주요 메소드
1. length : 문자열 길이
2. charAt(x) : x번째 문자 === 문자열변수(x)
3. toUpperCase() : 대문자 변환
<> toLowerCase() : 소문자 변환
4. trim() : 문자열의 양쪽에 공백이 있을시, 해당 공백 제거후 출력.
5. slice(num1, num2) : num1부터 num2번째 직전까지의 문자열 리턴. num2가 0일경우 끝까지 출력.

문자열과 배열의 차이?
배열은 바뀔수 있지만, 문자열은 바뀔수 없다!

기본형? => 값 자체가 복사. 즉, 다른객체. 수정시에도 별계취급.
참조형? => 주소값이 복사. 즉, 같은 객체. 수정시에는 동일취급.

참조형 복사?
배열: 복사전 배열.slice() => 그대로 복사 가능
객체: 
1. Object.assign({}, 복사전 객체) => 그대로 복사 가능
2. for( in )문 활용 or for in문을 넣은 함수 생성과 호출
단, 객체나 배열 내부에 중첩해서 배열이나 객체가 있을 경우 동일하게 주소값만 복사되기에 주의!!

동작시 상수로 변하는 변수? => const 사용이 효율적!
참조형의 경우 값을 변경하더라도 할당된 주소값을 변경하는것이 아니기에 상수로 선언하여도 무방하다!!

var?
중복선언 가능. 값을 재할당이 아니라, 변수를 덮어 쓰는것.
변수가 끌어올려지는 호이스팅 현상 발생.